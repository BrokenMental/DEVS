/*
 * DialogDeltext.java
 *
 * Created on July 12, 2007, 2:07 PM
 */

package genDevs.jaxb.gui;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;


/**
 * This code was edited or generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a corporation,
 * company or business for any purpose whatever) then you
 * should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details.
 * Use of Jigloo implies acceptance of these licensing terms.
 * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
 * THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
 * LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
 */
/**
 *
 * @author  Saurabh
 */
public class DialogDeltext extends javax.swing.JDialog {
    
    private TableModel_Deltext tableModel = null;
    private Hashtable<Integer,StructureDeltext> data = null;
    int counter = 0;
    
    /** Creates new form DialogDeltext */
    public DialogDeltext(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        data = new Hashtable<Integer, StructureDeltext>();
    }
    
    public void loadStateComboBoxes(Vector states){
        this.jcbStartState.removeAllItems();
        this.jcbNextState.removeAllItems();
        
        Iterator it = states.iterator();
        while(it.hasNext()){
            String state = (String)it.next();
            this.jcbStartState.addItem(state);
            this.jcbNextState.addItem(state);
        }
        validate();
    }
    
    public void resetTables(){
        tableModel  = new TableModel_Deltext();
        jTableDeltext = new JTable(tableModel);
        
        this.jScrollPane1.setViewportView(jTableDeltext);
        loadData();
        validate();
    }
    
    public void loadData(){
        data = FrameFDDEVS.deltext;
        Enumeration e = data.keys();
        while(e.hasMoreElements()){
            Integer key = (Integer)e.nextElement();
            StructureDeltext deltext = (StructureDeltext)data.get(key);
            
            Object[] dataSet = {
                key.intValue(),
                deltext.incomingMsg,
                deltext.startState, deltext.nextState,
                deltext.reschedule, deltext.ta, deltext.outgoingMsg};
            
            if(counter < key.intValue()){
                counter = key.intValue();
            }
            tableModel.addRow(dataSet);
            int row = jTableDeltext.getRowCount() - 1;
            jTableDeltext.changeSelection(row, 0, false, false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfSNo = new javax.swing.JTextField();
        jtfIncomingMsg = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcbStartState = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jcbNextState = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfOutgoingMsg = new javax.swing.JTextField();
        jcbReschedule = new javax.swing.JCheckBox();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDeltext = new javax.swing.JTable();
        jButtonDone = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jtfTimeout = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel1.setText("S.No.");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel2.setText("Incoming Msg");

        jtfSNo.setFont(new java.awt.Font("Tahoma", 0, 10));
        jtfSNo.setText("1");

        jtfIncomingMsg.setFont(new java.awt.Font("Tahoma", 0, 10));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel3.setText("Start State");

        jcbStartState.setFont(new java.awt.Font("Tahoma", 0, 10));
        jcbStartState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel4.setText("Next State");

        jcbNextState.setFont(new java.awt.Font("Tahoma", 0, 10));
        jcbNextState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbNextState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbNextStateItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel5.setText("Reschedule");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel6.setText("Outgoing Msg");

        jtfOutgoingMsg.setFont(new java.awt.Font("Tahoma", 0, 10));

        jcbReschedule.setSelected(true);
        jcbReschedule.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jcbReschedule.setMargin(new java.awt.Insets(0, 0, 0, 0));
		jcbReschedule.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jcbRescheduleActionPerformed(evt);
			}
		});
		jcbReschedule.addItemListener(new ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jcbRescheduleItemStateChanged(evt);
			}
		});

        jButtonAdd.setFont(new java.awt.Font("Tahoma", 0, 10));
        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonDelete.setFont(new java.awt.Font("Tahoma", 0, 10));
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jTableDeltext.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableDeltext);

        jButtonDone.setText("Done");
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jtfTimeout.setFont(new java.awt.Font("Tahoma", 0, 10));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel7.setText("Timeout");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtfSNo, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfIncomingMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbStartState, 0, 120, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbNextState, 0, 119, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jcbReschedule)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(jtfOutgoingMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDelete))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDone)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jtfSNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jtfIncomingMsg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbStartState, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbNextState, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jtfTimeout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jtfOutgoingMsg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcbReschedule)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonDelete)
                        .addComponent(jButtonAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDone)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
private void jcbRescheduleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbRescheduleItemStateChanged
    
}//GEN-LAST:event_jcbRescheduleItemStateChanged

private void jcbNextStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbNextStateItemStateChanged
    String state = (String)this.jcbNextState.getSelectedItem();
    
    if(state==null)return;
    if(FrameFDDEVS.stateAndTA.containsKey(state)){
        Double value = (Double)FrameFDDEVS.stateAndTA.get(state);
        this.jtfTimeout.setText(""+value.doubleValue());
    } else{
        this.jtfTimeout.setEditable(true);
        System.out.println("Error in STATE_TA table in FDDEVS frame. Enter value!");
    }
}//GEN-LAST:event_jcbNextStateItemStateChanged

private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed
    FrameFDDEVS.deltext = data;
    this.dispose();
}//GEN-LAST:event_jButtonDoneActionPerformed

private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
    this.dispose();
}//GEN-LAST:event_jButtonCancelActionPerformed

private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
    int row = jTableDeltext.getSelectedRow()-1;
    if(row<0) row = 0;
    Object key = jTableDeltext.getValueAt(row, 0);
    if(data.containsKey((Integer)key)){
        data.remove((Integer)key);
    }
    tableModel.deleteRow(jTableDeltext.getSelectedRow());
    jTableDeltext.changeSelection(row, 0, false, false);
    jTableDeltext.requestFocusInWindow();
}//GEN-LAST:event_jButtonDeleteActionPerformed

private void resetEntries(){
    this.jtfIncomingMsg.setText("");
    this.jtfOutgoingMsg.setText("");
    this.jcbReschedule.setSelected(true);
    this.jtfTimeout.setText("");
    this.jtfSNo.setText(""+(counter+1));
    this.jtfSNo.setEditable(false);
    
}

private boolean isDeltextAlreadyDefined(StructureDeltext deltext){
    Enumeration e = data.elements();
    while(e.hasMoreElements()){
        StructureDeltext deltextElem = (StructureDeltext)e.nextElement();
        if(deltextElem.equals(deltext))
            return true;
    }
    
    return false;
}
private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
    try{
        Integer id = new Integer(Integer.parseInt(this.jtfSNo.getText()));
        
        String incomingMsg = this.jtfIncomingMsg.getText();
        String start = (String)this.jcbStartState.getSelectedItem();
        String next = (String) this.jcbNextState.getSelectedItem();
        Double ta = new Double(Double.parseDouble(this.jtfTimeout.getText()));
        String outgoingMsg = this.jtfOutgoingMsg.getText();
        boolean isReschedule = this.jcbReschedule.isSelected();
        
        StructureDeltext deltext = new StructureDeltext(id.intValue(),
                incomingMsg, start, next, isReschedule, ta.doubleValue(), outgoingMsg);
        
        if(!data.containsKey(id)){
            if(isDeltextAlreadyDefined(deltext)){
                javax.swing.JOptionPane.showMessageDialog(this, "External Transition Already Defined!");
                return;
            }
            data.put(id, deltext);
            counter = id.intValue();
            Object[] dataSet = {id,incomingMsg, start, next, isReschedule, ta, outgoingMsg};
            tableModel.addRow(dataSet);
            int row = jTableDeltext.getRowCount() - 1;
            jTableDeltext.changeSelection(row, 0, false, false);
            //jtableStateTA.requestFocusInWindow();
        }
        this.resetEntries();
    } catch(Exception ex){
        System.out.println("Error in inputing values. Check again!");
        javax.swing.JOptionPane.showMessageDialog(this, "Error in input values. Kindly check!");
        return;
    }
}//GEN-LAST:event_jButtonAddActionPerformed

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            DialogDeltext dialog = new DialogDeltext(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        }
    });
}

private void jcbRescheduleActionPerformed(ActionEvent evt) {
    if(this.jcbReschedule.isSelected()){
        //bpz Sept 2007
        JOptionPane.showMessageDialog(this,
                "Model will hold in NextState for Timeout value.");
    } else{
        JOptionPane.showMessageDialog(this, "Time Left value (sigma) will  be retained."+
                "\nModel will move to NextState only.");
                /*
                                JOptionPane.showMessageDialog(this, "Elapsed Time will be reset to zero."+
                        "\nModel will hold in NextState for Timeout value.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Elapsed Time will not be reset to zero."+
                        "\nModel will move to NextState only.");
                 */
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDeltext;
    private javax.swing.JComboBox jcbNextState;
    private javax.swing.JCheckBox jcbReschedule;
    private javax.swing.JComboBox jcbStartState;
    private javax.swing.JTextField jtfIncomingMsg;
    private javax.swing.JTextField jtfOutgoingMsg;
    private javax.swing.JTextField jtfSNo;
    private javax.swing.JTextField jtfTimeout;
    // End of variables declaration//GEN-END:variables
    
}
